---
description: 
globs: 
alwaysApply: false
---
# Toilet Finder 프로젝트 룰 (클린 아키텍처 기반)

이 룰은 일본 내 공공 화장실 정보를 위치 기반으로 제공하는 **Toilet Finder** 프로젝트를 위한 아키텍처 및 코드 스타일 규칙을 정의합니다.

@frontend
@backend
@api
@db
@clean-architecture
@docker
@project-setup

---

## 💡 프로젝트 개요

이 프로젝트는 사용자 현재 위치를 기반으로, 주변의 공공 화장실 정보를 지도와 함께 제공하는 풀스택 웹 앱입니다.  
프론트엔드는 React, 백엔드는 Node.js/Express, 데이터는 PostgreSQL을 사용하며, **클린 아키텍처**를 적용해 코드 유지보수성과 확장성을 강조합니다.

---

## 🏛️ 아키텍처 구성 (클린 아키텍처 기준)

### 📁 백엔드 디렉토리 구조 (Node.js + Express)
/backend
├── src
│ ├── domain # 엔티티와 비즈니스 로직 (순수)
│ ├── application # 유스케이스 (입력-처리-출력)
│ ├── infrastructure # 외부 연동 (DB, Overpass API)
│ ├── interfaces # 컨트롤러, DTO 등 입출력 어댑터
│ ├── config # 환경 설정
│ └── index.ts # 앱 진입점



- 도메인은 어떤 외부에도 의존하지 않으며, 오직 로직만 담습니다.
- application은 도메인을 조합하여 유스케이스를 수행합니다.
- infrastructure는 외부 DB나 API를 실제로 호출합니다.
- interfaces는 Express 라우터, DTO, 요청-응답 처리 역할을 합니다.

---

### 📁 프론트엔드 디렉토리 구조
/frontend
├── src
│ ├── presentation # 페이지 및 컴포넌트 UI
│ ├── application # 상태관리, 유스케이스 로직
│ ├── domain # 모델 및 Entity
│ ├── infrastructure # API 호출, 외부 연동
│ ├── config # 환경 변수 및 공통 설정
│ └── main.tsx




- 프론트엔드도 presentation과 domain을 명확히 분리합니다.
- 상태관리 라이브러리로 Zustand 또는 Redux 사용 가능

---

## ✅ 코드 규칙

- 모든 코드에 **TypeScript** 사용
- 디렉토리 및 파일명은 **kebab-case** 사용
- 프론트 컴포넌트는 **함수형 + React Hooks**로 작성
- 백엔드는 **RESTful API + async/await 기반**으로 구성
- **DTO 패턴**으로 요청/응답 데이터 구조를 정의
- 환경변수는 `.env`로 관리, `.env.sample` 포함
- ESLint + Prettier로 코드 스타일 유지

---

## 🧪 테스트 전략

- `domain`과 `application` 레이어는 단위 테스트 작성 (mock 기반)
- controller, DB 연동은 통합 테스트 또는 e2e 테스트 작성
- 테스트 디렉토리 구조: `/backend/test` 내부에 유닛/통합 분리

---

## 🌐 외부 시스템 및 데이터

- 지도: Leaflet.js + OpenStreetMap
- 위치기반 API: HTML5 Geolocation
- 외부 화장실 데이터: Overpass API
- DB: PostgreSQL (+ PostGIS 선택)

---

## ⚙️ 배포 및 인프라

- Docker + docker-compose로 로컬 실행
- Nginx + Express + React를 통합 Reverse Proxy 구조로 배포
- Vercel/Render 혹은 AWS EC2에서 운영 가능

---

## 🧠 Cursor AI 동작 지침

- **레벨별 책임을 명확히 분리**하도록 유도
- UI 렌더링, 상태 처리, 외부 API 호출을 따로 관리
- 중첩된 비즈니스 로직은 `domain` 또는 `use-case`에 작성
- 중복 import 방지 및 모듈화 우선
- 사용자 위치 → 거리 계산 → 결과 반환 흐름을 유지

---



